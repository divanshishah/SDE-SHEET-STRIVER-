/*****************BRUTE FORCE********************//
static void markRow(ArrayList<ArrayList<Integer>> matrix, int n, int m, int i) {
        // set all non-zero elements as -1 in the row i:
        for (int j = 0; j < m; j++) {
            if (matrix.get(i).get(j) != 0) {
                matrix.get(i).set(j, -1);
            }
        }
    }

    static void markCol(ArrayList<ArrayList<Integer>> matrix, int n, int m, int j) {
        // set all non-zero elements as -1 in the col j:
        for (int i = 0; i < n; i++) {
            if (matrix.get(i).get(j) != 0) {
                matrix.get(i).set(j, -1);
            }
        }
    }

    static ArrayList<ArrayList<Integer>> zeroMatrix(ArrayList<ArrayList<Integer>> matrix, int n, int m) {
        // Set -1 for rows and cols that contains 0. Don't mark any 0 as -1:
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix.get(i).get(j) == 0) {
                    markRow(matrix, n, m, i);
                    markCol(matrix, n, m, j);
                }
            }
        }
        // Finally, mark all -1 as 0:
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix.get(i).get(j) == -1) {
                    matrix.get(i).set(j, 0);
                }
            }
        }
        return matrix;
    }
________________________________________________________________________________________________________________________________________________

//***********BEtter Aprroach***********//
/**********(reduces time complexity to n^2)********//
class Solution {
    public void setZeroes(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        boolean []ci=new boolean[n];
        boolean []cj=new boolean[m];
        for(int r=0;r<n;r++)
        {
            for(int c=0;c<m;c++)
            {
                if(matrix[r][c]==0)
                {
                    ci[r]=true;
                    cj[c]=true;
                }
                
            }
        }
        for(int i=0;i<n;i++)
        {
            if(ci[i]==true){
            for(int j=0;j<m;j++)
            {
                matrix[i][j]=0;
            }
            }
        }
        for(int i=0;i<m;i++)
        {
            if(cj[i]==true){
                for(int j=0;j<n;j++)
                {
                    matrix[j][i]=0;
                }
            }
        }
        
    }
}
________________________________________________________________________________________________________________________________________________

//*************Optimal Solution*****************//
/**********(optimizes the space complexity)*******//

class Solution {
    public void setZeroes(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int col0=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]==0){
                //mark the ith row
                matrix[i][0]=0;
                //mark the jth column
                if(j!=0)
                matrix[0][j]=0;
                else
                col0=0;
                }
            }
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(matrix[i][j]!=0){
                    //check for column & row
                    if(matrix[0][j]==0 || matrix[i][0]==0){
                        matrix[i][j]=0;
                    }
                }
            }
        }
        if(matrix[0][0]==0){
            for(int j=0;j<m;j++)
            matrix[0][j]=0;
        }
        if(col0==0){
            for(int i=0;i<n;i++)
            matrix[i][0]=0;
        }
    }
}
