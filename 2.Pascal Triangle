//**************BRUTE FORCE***********/
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans=new ArrayList<>();
       for(int i=1;i<=numRows;i++){
        ArrayList<Integer> templist=new ArrayList<>();
        for(int j=1;j<=i;j++){
            templist.add(ncr(i-1,j-1));
        }
        ans.add(templist);
       }
       return ans;
    }
    public static int ncr(int n,int r){
        long res=1;
        for(int i=0;i<r;i++){
            res=res*(n-i);
            res=res/(i+1);
        }
        return (int)res;
    }
}

/***************OPTIMAL SOLUTION**************/
class Solution {
    public List<List<Integer>> generate(int n) {
         List<List<Integer>> ans = new ArrayList<>();

        //store the entire pascal's triangle:
        for (int row = 1; row <= n; row++) {
            ans.add(generateRow(row));
        }
        return ans;
    }
    public static List<Integer> generateRow(int row) {
        long ans = 1;
        List<Integer> ansRow = new ArrayList<>();
        ansRow.add(1); //inserting the 1st element

        //calculate the rest of the elements:
        for (int col = 1; col < row; col++) {
            ans = ans * (row - col);
            ans = ans / col;
            ansRow.add((int)ans);
        }
        return ansRow;
    }
}
