/***************BRUTE FORCE**********************/
public static int maxSubarraySum(int[] arr, int n) {
        int maxi = Integer.MIN_VALUE; // maximum sum

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                // subarray = arr[i.....j]
                int sum = 0;

                //add all the elements of subarray:
                for (int k = i; k <= j; k++) {
                    sum += arr[k];
                }

                maxi = Math.max(maxi, sum);
            }
        }

        return maxi;
    }

    /************************BETTER SOLUTION**********************/
    public static int maxSubarraySum(int[] arr, int n) {
        int maxi = Integer.MIN_VALUE; // maximum sum

        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                // current subarray = arr[i.....j]

                //add the current element arr[j]
                // to the sum i.e. sum of arr[i...j-1]
                sum += arr[j];

                maxi = Math.max(maxi, sum); // getting the maximum
            }
        }

        return maxi;
    }

    /*********************OPTIMAL SOLUTION************************/
    class Solution {
    public int maxSubArray(int[] nums) {
       
       int maxsub=nums[0];
       int currsum=0;
       for(int x:nums){
        if(currsum<0)
        currsum=0;
        currsum+=x;
        maxsub=Math.max(maxsub,currsum);
       }
       return maxsub;
    }
}
